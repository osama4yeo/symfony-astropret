{% extends 'base.html.twig' %}

{% block title %}Gestion du calendrier{% endblock %}

{% block body_content %}
<div class="container-fluid mt-4"> {# container-fluid pour une meilleure réactivité #}
    <h2 class="h2">Gestion des événements (Admin)</h2>

    {# Partie 1 : Le formulaire d'import (complet) #}
    <form method="post" action="{{ path('calendar_manage') }}" class="mb-3">
        <label for="ics_url" class="form-label">Importer un calendrier externe (.ics)</label>
        <div class="d-flex gap-2">
            <input type="text" name="ics_url" id="ics_url" class="form-control" placeholder="https://exemple.com/agenda.ics" required style="max-width: 400px;">
            <button type="submit" class="btn btn-secondary">Importer</button>
        </div>
    </form>

    {# Partie 2 : Les messages flash (complets) #}
    {% for label, messages in app.flashes %}
        {% for message in messages %}
            <div class="alert alert-{{ label }} mt-2">{{ message }}</div>
        {% endfor %}
    {% endfor %}

    {# Partie 3 : Le bouton d'ajout (complet) #}
    <button class="btn btn-primary mb-3" id="addEventBtn">
        + Ajouter un événement
    </button>
    
    <div id="calendar"></div>
</div>
{% endblock %}


{% block stylesheets %}
    {{ parent() }}
    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.15/main.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    
    <style>
        /* --- Styles Généraux --- */
        body { background-color: #f8f9fa; }
        .h2 { font-weight: 600; color: #343a40; text-align: center; margin-bottom: 30px; }
        #calendar { max-width: 100%; width: 100%; min-height: 700px; background-color: #ffffff; border-radius: 12px; padding: 20px; box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1); }
        
        /* --- Barre d'outils --- */
        .fc-toolbar-title { font-size: 1.4rem; font-weight: 500; color: #343a40; text-transform: capitalize; }
        .fc-button {
            background-color: #0d6efd !important;
            border: none !important;
            border-radius: 6px !important;
            font-size: 0.9rem;
            /* DEMANDE 2 : Espacer les boutons */
            margin: 0 3px !important;
        }

        /* --- Événements --- */
        .fc-event {
            text-decoration: none !important; 
            color: white !important;
        }
        .fc-daygrid-event {
            background-color: #0d6efd !important; 
            border: none !important;
            border-radius: 6px;
            padding: 2px 6px;
            font-size: 0.8rem;
            font-weight: 500;
            white-space: normal !important;
            overflow-wrap: break-word;
        }

        /* --- Grille du calendrier --- */
        /* DEMANDE 4 : Texte des jours et numéros en noir et non souligné */
        .fc-daygrid-day-number, .fc-col-header-cell-cushion {
            color: #212529 !important; /* Couleur de texte noire/foncée */
            text-decoration: none !important; /* Pas de soulignement */
        }
        .fc-daygrid-day:hover .fc-daygrid-day-number { /* Effet de survol optionnel mais sympa */
             color: #0d6efd !important;
        }

        /* --- Styles pour SweetAlert2 (complets) --- */
        .swal2-input, .swal2-textarea {
            display: block; width: 100% !important; padding: .375rem .75rem; font-size: 1rem; font-weight: 400; line-height: 1.5;
            color: #212529; background-color: #fff; background-clip: padding-box; border: 1px solid #ced4da; border-radius: .25rem;
            transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out; margin-bottom: 1rem !important;
        }
        .swal2-label { margin-bottom: 0.5rem !important; text-align: left; font-size: 0.9rem; }
    </style>
{% endblock %}


{% block javascripts_page_specific %}
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.15/index.global.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const calendarEl = document.getElementById('calendar');

        // DEMANDE 3 : Fonction pour la réactivité
        function getDayHeaderFormat() {
            return (window.innerWidth < 768) ? { weekday: 'short' } : { weekday: 'long' };
        }

        const calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: 'dayGridMonth',
            locale: 'fr',
            firstDay: 1,
            
            headerToolbar: {
                left: 'prev,next today',
                center: 'title',
                // DEMANDE 5 : Changer 'listWeek' en 'listMonth'
                right: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth'
            },
            
            // DEMANDE 3 : Appliquer la fonction pour la réactivité
            dayHeaderFormat: getDayHeaderFormat(),
            windowResize: function(view) {
                calendar.setOption('dayHeaderFormat', getDayHeaderFormat());
            },

            // Traduction des boutons
            buttonText: {
                today:    'Aujourd\'hui',
                month:    'Mois',
                week:     'Semaine',
                day:      'Jour',
                list:     'Liste'
            },

            events: '{{ path("calendar_events") }}',

            // Logique de clic pour la création et la modification (inchangée)
            dateClick: function(info) {
                openEventModal({ dateStr: info.dateStr });
            },
            eventClick: function(info) {
                openEventModal(info.event);
            }
        });
        calendar.render();

        document.getElementById('addEventBtn').addEventListener('click', function() {
            openEventModal({});
        });


        // ===================================================================
        // LA FONCTION openEventModal COMPLÈTE ET SANS OUBLI
        // ===================================================================
        function openEventModal(eventData) {
            const isEditing = eventData.id ? true : false;
            
            let start = eventData.start ? new Date(eventData.start) : new Date();
            let end = eventData.end ? new Date(eventData.end) : new Date(start.getTime() + (60 * 60 * 1000));
            
            if (eventData.dateStr) {
                start = new Date(eventData.dateStr);
                end = new Date(new Date(eventData.dateStr).getTime() + (60 * 60 * 1000));
            }

            let description = '';
            if (isEditing && eventData.extendedProps && eventData.extendedProps.description) {
                description = eventData.extendedProps.description;
            }

            Swal.fire({
                title: isEditing ? 'Modifier l\'événement' : 'Ajouter un événement',
                html: `
                    <input type="hidden" id="swal-eventId" value="${eventData.id || ''}">
                    <label for="swal-eventTitle" class="swal2-label">Titre</label>
                    <input id="swal-eventTitle" class="swal2-input" placeholder="Titre de l'événement" value="${eventData.title || ''}" required>
                    <label for="swal-eventDescription" class="swal2-label">Description</label>
                    <textarea id="swal-eventDescription" class="swal2-textarea" placeholder="Description">${description}</textarea>
                    <label for="swal-eventDate" class="swal2-label">Date</label>
                    <input type="date" id="swal-eventDate" class="swal2-input" value="${start.toISOString().slice(0, 10)}">
                    <div style="display: flex; align-items: center; justify-content: center; margin-bottom: 1rem;">
                        <input type="checkbox" id="swal-eventAllDay" ${eventData.allDay ? 'checked' : ''}>
                        <label for="swal-eventAllDay" style="margin-left: 0.5rem;">Toute la journée</label>
                    </div>
                    <div id="swal-eventTimeFields">
                        <label for="swal-eventStartTime" class="swal2-label">Heure de début</label>
                        <input type="time" id="swal-eventStartTime" class="swal2-input" value="${start.toTimeString().slice(0, 5)}">
                        <label for="swal-eventEndTime" class="swal2-label">Heure de fin</label>
                        <input type="time" id="swal-eventEndTime" class="swal2-input" value="${end.toTimeString().slice(0, 5)}">
                    </div>
                `,
                confirmButtonText: 'Enregistrer',
                showDenyButton: isEditing,
                denyButtonText: 'Supprimer',
                showCancelButton: true,
                cancelButtonText: 'Annuler',
                focusConfirm: false,

                didOpen: () => {
                    const allDayCheckbox = document.getElementById('swal-eventAllDay');
                    const timeFields = document.getElementById('swal-eventTimeFields');
                    const toggleTimeFields = () => { timeFields.style.display = allDayCheckbox.checked ? 'none' : 'block'; };
                    allDayCheckbox.addEventListener('change', toggleTimeFields);
                    toggleTimeFields();
                },

                preConfirm: () => {
                    const title = document.getElementById('swal-eventTitle').value;
                    if (!title) { Swal.showValidationMessage('Le titre est obligatoire.'); return false; }
                    const allDay = document.getElementById('swal-eventAllDay').checked;
                    const startTime = document.getElementById('swal-eventStartTime').value;
                    const endTime = document.getElementById('swal-eventEndTime').value;
                    if (!allDay && endTime <= startTime) { Swal.showValidationMessage('L\'heure de fin doit être postérieure à l\'heure de début.'); return false; }
                    return { id: document.getElementById('swal-eventId').value, title: title, description: document.getElementById('swal-eventDescription').value,
                             date: document.getElementById('swal-eventDate').value, startTime: startTime, endTime: endTime, allDay: allDay };
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    const data = result.value;
                    const url = data.id ? '{{ path("calendar_update_event") }}' : '{{ path("calendar_create_event") }}';
                    let start = data.allDay ? data.date + "T00:00:00" : data.date + "T" + data.startTime + ":00";
                    let end = data.allDay ? data.date + "T23:59:59" : data.date + "T" + data.endTime + ":00";
                    fetch(url, {
                        method: 'POST', headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ id: data.id, title: data.title, description: data.description, start, end, allDay: data.allDay })
                    })
                    .then(res => res.json())
                    .then(data => {
                        if (data.success) { Swal.fire('Succès !', data.message || 'L\'événement a été enregistré.', 'success'); calendar.refetchEvents(); }
                        else { Swal.fire('Erreur', data.error || 'Une erreur est survenue.', 'error'); }
                    });
                } else if (result.isDenied) {
                    const eventId = document.getElementById('swal-eventId').value;
                    if (eventId) {
                        Swal.fire({
                            title: 'Êtes-vous sûr ?', text: "Cette action est irréversible !", icon: 'warning', showCancelButton: true,
                            confirmButtonColor: '#d33', cancelButtonColor: '#3085d6', confirmButtonText: 'Oui, supprimer !', cancelButtonText: 'Annuler'
                        }).then((deleteResult) => {
                            if (deleteResult.isConfirmed) {
                                fetch('{{ path("calendar_delete_event") }}', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ id: eventId }) })
                                .then(res => res.json())
                                .then(data => {
                                    if (data.success) { Swal.fire('Supprimé !', 'L\'événement a été supprimé.', 'success'); calendar.refetchEvents(); }
                                    else { Swal.fire('Erreur', data.error || 'La suppression a échoué.', 'error'); }
                                });
                            }
                        });
                    }
                }
            });
        }
    });
</script>
{% endblock %}