{% extends 'base.html.twig' %}

{% block title %}Gestion du calendrier{% endblock %}

{% block body_content %}
<div class="container-fluid mt-4">
    <h2 class="h2">Gestion des événements (Admin)</h2>

    {# =================================================================== #}
    {#   PARTIE 1 : FORMULAIRE D'IMPORT DE CALENDRIER EXTERNE (.ics)       #}
    {# =================================================================== #}
    {# Ce formulaire permet à l'administrateur de coller une URL         #}
    {# pointant vers un fichier .ics pour importer ses événements.         #}
    {# La soumission est gérée par la méthode 'manage' du CalendarController. #}
    {# =================================================================== #}
    <form method="post" action="{{ path('calendar_manage') }}" class="mb-3">
        <label for="ics_url" class="form-label">Importer un calendrier externe (.ics)</label>
        <div class="d-flex gap-2">
            <input type="text" name="ics_url" id="ics_url" class="form-control" placeholder="https://exemple.com/agenda.ics" required style="max-width: 400px;">
            <button type="submit" class="btn btn-secondary">Importer</button>
        </div>
    </form>

    {# =================================================================== #}
    {#   PARTIE 2 : AFFICHAGE DES MESSAGES FLASH (SUCCÈS/ERREUR)           #}
    {# =================================================================== #}
    {# Cette boucle affiche les messages de succès ou d'erreur après     #}
    {# une action, comme un import réussi ou une erreur de synchronisation.#}
    {# =================================================================== #}
    {% for label, messages in app.flashes %}
        {% for message in messages %}
            <div class="alert alert-{{ label }} mt-2">{{ message }}</div>
        {% endfor %}
    {% endfor %}

    {# =================================================================== #}
    {#   PARTIE 3 : BOUTON D'AJOUT MANUEL D'ÉVÉNEMENT                      #}
    {# =================================================================== #}
    {# Ce bouton déclenche l'ouverture de la pop-up (SweetAlert2) pour   #}
    {# créer un nouvel événement directement depuis l'interface.          #}
    {# =================================================================== #}
    <button class="btn btn-primary mb-3" id="addEventBtn">
        + Ajouter un événement
    </button>
    
    {# =================================================================== #}
    {#   PARTIE 4 : CONTENEUR DU CALENDRIER FULLCALENDAR                   #}
    {# =================================================================== #}
    {# C'est dans cette 'div' que le JavaScript va générer et afficher   #}
    {# le calendrier interactif.                                         #}
    {# =================================================================== #}
    <div id="calendar"></div>
</div>
{% endblock %}


{% block stylesheets %}
    {# On hérite des styles du template de base (base.html.twig) #}
    {{ parent() }}

    {# On ajoute les feuilles de style spécifiques à cette page #}
    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.15/main.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    
<style>
    /* --- Apparence générale --- */
    body { background-color: #f8f9fa; }
    .h2 { font-weight: 600; color: #343a40; text-align: center; margin-bottom: 30px; }

    /* --- Conteneur du calendrier --- */
    #calendar {
        max-width: 100%;
        width: 100%;
        min-height: 700px;
        background-color: #ffffff;
        border-radius: 12px;
        padding: 20px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        overflow-x: auto; /* ✅ Permet de scroller horizontalement sur petit écran */
    }

    /* --- Composant FullCalendar lui-même --- */
    .fc {
        min-width: 600px; /* ✅ Largeur minimale du calendrier pour éviter l'écrasement */
    }

    /* --- Barre d'outils FullCalendar --- */
    .fc-toolbar-title {
        font-size: 1.4rem;
        font-weight: 500;
        color: #343a40;
        text-transform: capitalize;
    }
    .fc-button {
        background-color: #0d6efd !important;
        border: none !important;
        border-radius: 6px !important;
        font-size: 0.9rem;
        margin: 0 3px !important;
    }

    /* --- Événements --- */
    .fc-event {
        text-decoration: none !important;
        color: white !important;
    }
    .fc-daygrid-event {
        background-color: #0d6efd !important;
        border: none !important;
        border-radius: 6px;
        padding: 2px 6px;
        font-size: 0.8rem;
        font-weight: 500;
        white-space: normal !important;
        overflow-wrap: break-word;
    }

    .fc-list-event-dot,
    .fc-daygrid-event-dot {
        display: none !important; /* ✅ Supprime les petits cercles de couleur inutiles */
    }

    /* --- Grille de jour --- */
    .fc-daygrid-day-number,
    .fc-col-header-cell-cushion {
        color: #212529 !important;
        text-decoration: none !important;
    }
    .fc-daygrid-day:hover .fc-daygrid-day-number {
        color: #0d6efd !important;
    }

    /* --- Styles pour la pop-up SweetAlert2 --- */
    .swal2-input, .swal2-textarea {
        display: block;
        width: 100% !important;
        padding: .375rem .75rem;
        font-size: 1rem;
        color: #212529;
        background-color: #fff;
        border: 1px solid #ced4da;
        border-radius: .25rem;
        margin-bottom: 1rem !important;
    }
    .swal2-label {
        margin-bottom: 0.5rem !important;
        text-align: left;
        font-size: 0.9rem;
    }

    /* ✅ Adaptation responsive pour les petits écrans */
    @media (max-width: 768px) {
        .fc-toolbar-title {
            font-size: 1rem;
        }
        .fc-button {
            font-size: 0.8rem;
            padding: 0.3rem 0.5rem;
        }
        .fc-daygrid-event {
            font-size: 0.7rem;
        }
    }
</style>
{% endblock %}


{% block javascripts_page_specific %}
{# On charge les bibliothèques JavaScript nécessaires #}
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.15/index.global.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>

<script>
    // On attend que le DOM soit entièrement chargé pour exécuter le script
    document.addEventListener('DOMContentLoaded', function () {
        const calendarEl = document.getElementById('calendar');

        // Fonction utilitaire pour adapter le format des jours à la taille de l'écran
        function getDayHeaderFormat() {
            return (window.innerWidth < 768) ? { weekday: 'short' } : { weekday: 'long' };
        }

        // =================================================================== */
        //   INITIALISATION DE FULLCALENDAR
        // =================================================================== */
        const calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: 'dayGridMonth', // Vue par défaut
            locale: 'fr', // Langue française
            firstDay: 1, // La semaine commence le Lundi
            
            // Configuration de la barre d'outils
            headerToolbar: {
                left: 'prev,next today',
                center: 'title',
                right: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth' // On utilise listMonth
            },
            
            // Réactivité du format des en-têtes de jour
            dayHeaderFormat: getDayHeaderFormat(),
            windowResize: function(view) {
                calendar.setOption('dayHeaderFormat', getDayHeaderFormat());
            },

            // Traduction des boutons
            buttonText: {
                today:    'Aujourd\'hui',
                month:    'Mois',
                week:     'Semaine',
                day:      'Jour',
                list:     'Liste' // Le texte pour 'listMonth'
            },

            // Source des événements : une route Symfony qui retourne du JSON
            events: '{{ path("calendar_events") }}',

            // --- GESTION DES CLICS ---
            // Clic sur une date vide : ouvre la pop-up de création
            dateClick: function(info) {
                openEventModal({ dateStr: info.dateStr });
            },
            // Clic sur un événement existant : ouvre la pop-up de modification
            eventClick: function(info) {
                openEventModal(info.event);
            }
        });
        
        // On affiche le calendrier
        calendar.render();

        // On attache l'événement de clic au bouton "+ Ajouter un événement"
        document.getElementById('addEventBtn').addEventListener('click', function() {
            openEventModal({}); // Ouvre la pop-up de création sans pré-remplir de date
        });


        // =================================================================== */
        //   FONCTION CENTRALE POUR LA GESTION DES ÉVÉNEMENTS (POP-UP)
        // =================================================================== */
        function openEventModal(eventData) {
            const isEditing = eventData.id ? true : false;
            
            // On prépare les dates de début et de fin
            let start = eventData.start ? new Date(eventData.start) : new Date();
            let end = eventData.end ? new Date(eventData.end) : new Date(start.getTime() + (60 * 60 * 1000));
            
            if (eventData.dateStr) {
                start = new Date(eventData.dateStr);
                end = new Date(new Date(eventData.dateStr).getTime() + (60 * 60 * 1000));
            }

            // On récupère la description depuis les 'extendedProps' de l'événement
            let description = (isEditing && eventData.extendedProps && eventData.extendedProps.description) ? eventData.extendedProps.description : '';

            // --- AFFICHAGE DE LA POP-UP SWEETALERT2 ---
            Swal.fire({
                title: isEditing ? 'Modifier l\'événement' : 'Ajouter un événement',
                // Le HTML du formulaire dans la pop-up
                html: `
                    <input type="hidden" id="swal-eventId" value="${eventData.id || ''}">
                    <label for="swal-eventTitle" class="swal2-label">Titre</label>
                    <input id="swal-eventTitle" class="swal2-input" placeholder="Titre de l'événement" value="${eventData.title || ''}" required>
                    <label for="swal-eventDescription" class="swal2-label">Description</label>
                    <textarea id="swal-eventDescription" class="swal2-textarea" placeholder="Description">${description}</textarea>
                    <label for="swal-eventDate" class="swal2-label">Date</label>
                    <input type="date" id="swal-eventDate" class="swal2-input" value="${start.toISOString().slice(0, 10)}">
                    <div style="display: flex; align-items: center; justify-content: center; margin-bottom: 1rem;">
                        <input type="checkbox" id="swal-eventAllDay" ${eventData.allDay ? 'checked' : ''}>
                        <label for="swal-eventAllDay" style="margin-left: 0.5rem;">Toute la journée</label>
                    </div>
                    <div id="swal-eventTimeFields">
                        <label for="swal-eventStartTime" class="swal2-label">Heure de début</label>
                        <input type="time" id="swal-eventStartTime" class="swal2-input" value="${start.toTimeString().slice(0, 5)}">
                        <label for="swal-eventEndTime" class="swal2-label">Heure de fin</label>
                        <input type="time" id="swal-eventEndTime" class="swal2-input" value="${end.toTimeString().slice(0, 5)}">
                    </div>
                `,
                confirmButtonText: 'Enregistrer',
                showDenyButton: isEditing, // Affiche le bouton "Supprimer" seulement en mode édition
                denyButtonText: 'Supprimer',
                showCancelButton: true,
                cancelButtonText: 'Annuler',
                focusConfirm: false,

                // Fonction exécutée à l'ouverture de la pop-up
                didOpen: () => {
                    const allDayCheckbox = document.getElementById('swal-eventAllDay');
                    const timeFields = document.getElementById('swal-eventTimeFields');
                    const toggleTimeFields = () => { timeFields.style.display = allDayCheckbox.checked ? 'none' : 'block'; };
                    allDayCheckbox.addEventListener('change', toggleTimeFields);
                    toggleTimeFields(); // On l'exécute une fois au début
                },

                // Fonction de validation avant de soumettre
                preConfirm: () => {
                    const title = document.getElementById('swal-eventTitle').value;
                    if (!title) { Swal.showValidationMessage('Le titre est obligatoire.'); return false; }
                    const allDay = document.getElementById('swal-eventAllDay').checked;
                    const startTime = document.getElementById('swal-eventStartTime').value;
                    const endTime = document.getElementById('swal-eventEndTime').value;
                    if (!allDay && endTime <= startTime) { Swal.showValidationMessage('L\'heure de fin doit être postérieure à l\'heure de début.'); return false; }
                    
                    return { 
                        id: document.getElementById('swal-eventId').value,
                        title: title, 
                        description: document.getElementById('swal-eventDescription').value,
                        date: document.getElementById('swal-eventDate').value,
                        startTime: startTime,
                        endTime: endTime,
                        allDay: allDay 
                    };
                }
            }).then((result) => {
                // --- GESTION DE LA SOUMISSION DU FORMULAIRE (AJAX/FETCH) ---
                if (result.isConfirmed) {
                    const data = result.value;
                    // On choisit l'URL en fonction de si on crée ou on modifie
                    const url = data.id ? '{{ path("calendar_update_event") }}' : '{{ path("calendar_create_event") }}';
                    
                    // On formate les dates pour le backend
                    let start = data.allDay ? data.date + "T00:00:00" : data.date + "T" + data.startTime + ":00";
                    let end = data.allDay ? data.date + "T23:59:59" : data.date + "T" + data.endTime + ":00";
                    
                    // On envoie les données au serveur
                    fetch(url, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ id: data.id, title: data.title, description: data.description, start, end, allDay: data.allDay })
                    })
                    .then(res => res.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire('Succès !', data.message || 'L\'événement a été enregistré.', 'success');
                            calendar.refetchEvents(); // TRÈS IMPORTANT : On rafraîchit le calendrier
                        } else {
                            Swal.fire('Erreur', data.error || 'Une erreur est survenue.', 'error');
                        }
                    });
                } 
                // --- GESTION DE LA SUPPRESSION ---
                else if (result.isDenied) {
                    const eventId = document.getElementById('swal-eventId').value;
                    if (eventId) {
                        Swal.fire({
                            title: 'Êtes-vous sûr ?',
                            text: "Cette action est irréversible !",
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#d33',
                            cancelButtonColor: '#3085d6',
                            confirmButtonText: 'Oui, supprimer !',
                            cancelButtonText: 'Annuler'
                        }).then((deleteResult) => {
                            if (deleteResult.isConfirmed) {
                                // On envoie la requête de suppression
                                fetch('{{ path("calendar_delete_event") }}', { 
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({ id: eventId })
                                })
                                .then(res => res.json())
                                .then(data => {
                                    if (data.success) {
                                        Swal.fire('Supprimé !', 'L\'événement a été supprimé.', 'success');
                                        calendar.refetchEvents(); // On rafraîchit le calendrier
                                    } else {
                                        Swal.fire('Erreur', data.error || 'La suppression a échoué.', 'error');
                                    }
                                });
                            }
                        });
                    }
                }
            });
        }
    });
</script>
{% endblock %}